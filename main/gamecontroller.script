
local cardinfo = require( 'main.cardInfo' )

function set_player( self, player_num )
	if( player_num == 1 ) then
		msg.post( '/player1img#spriteOn',  'enable' )
		msg.post( '/player1img#spriteOff', 'disable' )
		msg.post( '/player1img#spriteBox', 'enable' )
		if( self.num_players > 1 ) then
			msg.post( '/player2img#spriteOn',  'disable' )
			msg.post( '/player2img#spriteOff', 'enable' )
			msg.post( '/player2img#spriteBox', 'enable' )
		end
	elseif( player_num == 2 ) then
		msg.post( '/player1img#spriteOn',  'disable' )
		msg.post( '/player1img#spriteOff', 'enable' )
		msg.post( '/player1img#spriteBox', 'enable' )
		msg.post( '/player2img#spriteOn',  'enable' )
		msg.post( '/player2img#spriteOff', 'disable' )
		msg.post( '/player2img#spriteBox', 'enable' )
	elseif( player_num == -1 ) then
		msg.post( '/player1img#spriteOn',  'disable' )
		msg.post( '/player1img#spriteOff', 'disable' )
		msg.post( '/player1img#spriteBox', 'disable' )
		msg.post( '/player2img#spriteOn',  'disable' )
		msg.post( '/player2img#spriteOff', 'disable' )
		msg.post( '/player2img#spriteBox', 'disable' )
	elseif( player_num == -2 ) then
		msg.post( '/player1img#spriteOn',  'disable' )
		msg.post( '/player1img#spriteOff', 'enable' )
		msg.post( '/player1img#spriteBox', 'enable' )
		msg.post( '/player2img#spriteOn',  'disable' )
		msg.post( '/player2img#spriteOff', 'enable' )
		msg.post( '/player2img#spriteBox', 'enable' )
	end
end

function draw_game( self )
	--self.num_card_pairs = 8
	
	-- insert N pairs of random cards
	local allcards = {}
	for i=1,#cardinfo.cardFaces do
		table.insert( allcards, i )
	end
	local clist = {}
	for i=1,self.num_card_pairs do
		local rn = math.random( 1, #allcards )
		local num = allcards[rn]
		table.insert( clist, num )
		table.insert( clist, num )
		table.remove( allcards, rn )
	end
	-- shuffle the cards
	if( true ) then
		for i=1,(2*self.num_card_pairs) do
			local n0 = math.random( 1, #clist )
			local n1 = math.random( 1, #clist )
			local temp  = clist[ n0 ]
			clist[ n0 ] = clist[ n1 ]
			clist[ n1 ] = temp
		end
	end
	
	if( self.num_card_pairs == 8 ) then
		self.col0 = 150
		self.num_cols = 4
		self.col_width = 150
		self.row0 = 125
		self.num_rows = 4
		self.row_height = 175
		self.card_scale = vmath.vector3( 0.75,0.75,1 )
	elseif( self.num_card_pairs == 10 ) then
		-- not used
		self.col0 = 75
		self.num_cols = 5
		self.col_width = 150
		self.row0 = 75
		self.num_rows = 4
		self.row_height = 175
		self.card_scale = vmath.vector3( 0.75,0.75,1 )
	elseif( self.num_card_pairs == 12 ) then
		self.col0 = 75
		self.num_cols = 6
		self.col_width = 150
		self.row0 = 75
		self.num_rows = 4
		self.row_height = 175
		self.card_scale = vmath.vector3( 0.75,0.75,1 )
	elseif( self.num_card_pairs == 14 ) then
		-- not used
		self.col0 = 75
		self.num_cols = 7
		self.col_width = 125
		self.row0 = 75
		self.num_rows = 4
		self.row_height = 175
		self.card_scale = vmath.vector3( 0.7,0.7,1 )
	elseif( self.num_card_pairs == 15 ) then
		-- not used
		self.col0 = 75
		self.num_cols = 6
		self.col_width = 125
		self.row0 = 75
		self.num_rows = 5
		self.row_height = 145
		self.card_scale = vmath.vector3( 0.7,0.7,1 )
	elseif( self.num_card_pairs == 18 ) then
		self.col0 = 75
		self.num_cols = 6
		self.col_width = 110
		self.row0 = 75
		self.num_rows = 6
		self.row_height = 125
		self.card_scale = vmath.vector3( 0.6,0.6,1 )
	end	

	-- TODO: randomize the card-front and -back
	local rn_front = math.random(1,#cardinfo.cardFronts)
	local rn_back  = math.random(1,#cardinfo.cardBacks)
	local props = {
		parent = msg.url(),
		card_back = rn_back,
		card_front = rn_front,
	}
	self.card_objs = {}
	local ctr = 1
	for iy=1,self.num_rows do
		local y = self.row0 + (iy-1)*self.row_height
		print( 'y', iy, y )
		for ix=1,self.num_cols do
			local x = self.col0 + (ix-1)*self.col_width
			print( 'x', ix, x )
			props.card_face = clist[ ctr ]
			ctr = ctr + 1
			local pos = vmath.vector3( x,y,0 )
			local id = factory.create( 'cardFactory#factory', pos, nil, props, self.card_scale )
			self.card_objs[id] = { showing='back', state='normal' }
		end
	end
end

function init(self)
	math.randomseed( os.clock() )
	msg.post( '.', 'acquire_input_focus' )

	-- game state
	self.num_players = 0
	self.player = -1
	self.scores = { 0, 0 }
	self.card1 = nil
	self.card2 = nil

	set_player( self, -1 )
end

function dummy_endofturn( self )
	msg.post( self.card1, 'flip' )
	msg.post( self.card2, 'flip' )
	self.card1 = nil
	self.card2 = nil

	print( 'endofturn', self.player, self.num_players, self.player%self.num_players + 1 )
	self.player = self.player%self.num_players + 1
	set_player( self, self.player )
end

function end_of_game_phase3( self, url, property )
	print( 'end of game - phase 3 complete' )
	set_player( self, -1 )
	for i,v in pairs(self.card_objs) do
		print( 'deleting', i, v.script_url.path )
		go.delete( v.script_url.path, true )
	end
	msg.post( '/level_select/script#level_select', 'game_over' )
end
function end_of_game_phase2( self, handle, time_elapsed )
	print( 'end of game - phase 2 complete' )

	-- move box back to -100
	go.animate( '/player1wins', 'position.y', go.PLAYBACK_ONCE_FORWARD, -100, go.EASING_LINEAR, 0.5, 0, end_of_game_phase3 )
	go.animate( '/player2wins', 'position.y', go.PLAYBACK_ONCE_FORWARD, -100, go.EASING_LINEAR, 0.5 )
	go.animate( '/gametied', 'position.y', go.PLAYBACK_ONCE_FORWARD, -100, go.EASING_LINEAR, 0.5 )
end
function end_of_game( self, url, property )
	print( 'end of game - phase 1 complete' )
	if( self.winner == 0 ) then
		particlefx.play( '/gametied#endofgame' )
	elseif( self.winner == 1 ) then
		particlefx.play( '/player1wins#endofgame' )
	elseif( self.winner == 2 ) then
		particlefx.play( '/player2wins#endofgame' )
	end
	timer.delay( 1.0, false, end_of_game_phase2 )
end

function on_message( self, message_id, message, sender )
	if( message_id == hash('check_in') ) then
		local id = message.id
		-- print( 'recv check_in from', id, sender )
		self.card_objs[id].front_id  = message.front_id
		self.card_objs[id].back_id   = message.back_id
		self.card_objs[id].front_url = message.front_url
		self.card_objs[id].back_url  = message.back_url
		self.card_objs[id].script_url = message.script_url

	elseif( message_id == hash('start_game') ) then
		self.num_players = message.num_players
		self.player = 1
		set_player( self, 1 )
		if( message.level == 1 ) then
			self.num_card_pairs = 8
		elseif( message.level == 2 ) then
			self.num_card_pairs = 12
		elseif( message.level == 3 ) then
			self.num_card_pairs = 18
		end
		self.scores = { 0, 0 }
		self.card1 = nil
		self.card2 = nil
		draw_game(self)

	elseif( message_id == hash('card_touch') ) then
		print( 'card was touched', sender, message.state )

		if( self.card1 == nil ) then
			print( 'triggering flip animation - 1' )
			self.card1 = sender
			self.card1_face = message.card_face
			msg.post( sender, 'flip' )
			sound.play( '#flipSound' )
			rtn = true
		else
			if( sender ~= self.card1 ) then
				print( 'triggering flip animation - 2' )
				self.card2 = sender
				self.card2_face = message.card_face
				msg.post( sender, 'flip' )
				sound.play( '#flipSound' )
				rtn = true

				print( '2 cards: ', self.card1_face, self.card2_face )

				-- we now have 2 cards selected ... do they match?
				if( self.card1_face == self.card2_face ) then
					local pos = vmath.vector3( 0, 0, 0.80 )
					if( self.player == 1 ) then
						pos.x = 830 + (self.scores[self.player]%4)*45
						pos.y = 630 - math.floor(self.scores[self.player]/4)*60
					else
						pos.x = 830 + (self.scores[self.player]%4)*45
						pos.y = 275 - math.floor(self.scores[self.player]/4)*60
					end
					msg.post( self.card1, 'iconify', {pos=pos} )
					msg.post( self.card2, 'iconify', {pos=pos} )
					self.card1 = nil
					self.card1_face = nil
					self.card2 = nil
					self.card2_face = nil
					self.scores[self.player] = self.scores[self.player] + 1

					if( (self.scores[1]+self.scores[2]) == self.num_card_pairs ) then
						set_player( -2 )
						if( self.scores[1] > self.scores[2] ) then
							print( 'player 1 wins' )
							self.winner = 1
							go.animate( '/player1wins', 'position.y', go.PLAYBACK_ONCE_FORWARD, 368, go.EASING_LINEAR, 0.5, 0, end_of_game )
						elseif( self.scores[1] < self.scores[2] ) then
							print( 'player 2 wins' )
							self.winner = 2
							go.animate( '/player2wins', 'position.y', go.PLAYBACK_ONCE_FORWARD, 368, go.EASING_LINEAR, 0.5, 0, end_of_game )
						else
							print( 'tie score' )
							self.winner = 0
							go.animate( '/gametied', 'position.y', go.PLAYBACK_ONCE_FORWARD, 368, go.EASING_LINEAR, 0.5, 0, end_of_game )
						end
					end
				else
					-- TODO: send end-of-turn signal
					timer.delay( 0.5, false, dummy_endofturn )
				end
			end
		end

	end
end

function on_input(self, action_id, action)
	local rtn = false
	if( action_id ~= nil ) then
		if( action_id == hash('touch') ) then
			print( 'touch', action.pressed, action.released )
			if( action.pressed and (self.num_players>0) ) then
				local tx = action.x
				local ty = action.y

				local cobjs = self.card_objs
				local found_obj = nil
				local found_scr = nil
				for co,v in pairs(cobjs) do
					-- print( 'co=',co,v,v.back_id )
					local pos = go.get_position( co )
					local sz  = go.get( v.back_url, 'size' )
					local x0 = pos.x - sz.x/2
					local x1 = pos.x + sz.x/2
					local y0 = pos.y - sz.y/2
					local y1 = pos.y + sz.y/2
					if( (tx>=x0) and (tx<=x1) and (ty>=y0) and (ty<=y1) ) then
						found_obj = co
						found_scr = v.script_url
						break
					end
				end
				if( found_obj ~= nil ) then
					local is_ready = go.get( found_scr, 'ready' )
					if( is_ready ) then
						msg.post( found_obj, 'send_touch' )
						rtn = true
					end
				end
			end
		end
	end
	return rtn
end

